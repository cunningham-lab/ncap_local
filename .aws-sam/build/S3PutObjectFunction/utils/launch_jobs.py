import boto3
import time
### Small example script to deploy commands to a fleet of instances.

### CONFIGURATION VARIABLES:
## MUST BE CHANGED
IAM_ROLE = 'pmd-s3-ssm'  # name of IAM role with SSM & S3 access
KEY_NAME = 'ta_testkey' # generated by user under IAM security credentials tab.

## CAN BE DEPLOYED AS IS
AMI = 'ami-0b69ea66ff7391e80' # which image to boot from. (This is linux default ami. )
INSTANCE_TYPE = 't2.micro'  # instance type to launch.
REGION = 'us-east-1'          # which region to create instances in
SHUTDOWN_BEHAVIOR = 'stop'  # 'terminate' or 'stop' when done
EXECUTION_TIMEOUT = '172800'

### DECLARE BOTO resources and clients.
ec2_resource = boto3.resource('ec2')
ssm_client = boto3.client('ssm')

### LAUNCH INSTANCE FUNCTION:
def launch_new_instance(instance_type, ami):
    """ Function To Launch New Instance From Image.
    Inputs:
    instance_type (str): a string indicating what kind of instance to launch. Must be one of AWS recognized instance types.
    ami (str): the id given to the AMI that we would like to launch.
    Outputs:
    ec2 instance objects: can be queried for instance id, instance state, instance type, etc. See boto3 docs for more info.
    """
    instances = ec2_resource.create_instances(
        ImageId=ami,
        InstanceType=instance_type,
        IamInstanceProfile={'Name': IAM_ROLE},
        MinCount=1,
        MaxCount=1,
        KeyName=KEY_NAME,
        InstanceInitiatedShutdownBehavior=SHUTDOWN_BEHAVIOR
    )
    return instances[0]

### SEND COMMAND FUNCTION:
def execute_commands_on_linux_instances(commands,
                                        instance_ids,
                                        working_dirs,
                                        log_bucket_name = None,
                                        log_path = None):
    """Runs commands on remote linux instances.
    Inputs:
    commands (list): a list of strings, each one a command to execute on the instances. Note: all commands given will be executed on all instances; not distributed one per instance.
    instance_ids (list): a list of instance_id strings, of the instances on which to execute the commands list.
    working_dirs (list): a list of working directories (strings) where commands are executed on each instance.
    log_bucket_name (str): the name of the s3 bucket to which you would like to send stdout and stderr output from this command.
    log_path (str): the file structure inside "log_bucket_name" to which you would liek to store stdout and stderr output.
    Outputs:
    ssm output command dictionary. Can be used to query commad state (via ssm.Client.list_commands)).
    """
    if log_bucket_name is None or log_path is None:
        output = ssm_client.send_command(
            DocumentName="AWS-RunShellScript", # One of AWS' preconfigured documents
            Parameters={'commands': commands,
                        "workingDirectory":working_dirs,
                        "executionTimeout":[EXECUTION_TIMEOUT]},
            InstanceIds=instance_ids
        )

    else:
        output = ssm_client.send_command(
            DocumentName="AWS-RunShellScript", # One of AWS' preconfigured documents
            Parameters={'commands': commands,
                        "workingDirectory":working_dirs,
                        "executionTimeout":[EXECUTION_TIMEOUT]},
            InstanceIds=instance_ids,
            OutputS3BucketName=log_bucket_name,
            OutputS3KeyPrefix=log_path
        )

    return output
### LAUNCH AND SEND COMMANDS:
def launch_and_send_commands(commands,instance_type,ami,working_dirs,log_bucket_name = None, log_path = None):
    """
    Function to create a fleet of new instances, and then send commands to them.
    Inputs:
    commands (list): a list of lists of strings, specifying the sets of commands that should be sent to each instance.
    instance_type (str): a string indicating what kind of instance to launch. Must be one of AWS recognized instance types.
    ami (str): the id given to the AMI that we would like to launch.
    working_dirs (list): a list of working directories per instance.
    Outputs:
    list: instance objects generated by this action.
    list: commands generated by this action.
    """
    instances = []
    command_outputs = []

    for i in range(len(commands)):
        newinstance = launch_new_instance(instance_type, ami)
        instances.append(newinstance)
    print(instances)
    ### Instances can take up to 1 minute to initialize.
    time.sleep(60)
    for i,c in enumerate(commands):
        ## Get the instance id.
        instance_id = instances[i].instance_id
        print(instance_id)
        working_dir = working_dirs[i]
        command = execute_commands_on_linux_instances(c,[instance_id],[working_dir],log_bucket_name,log_path)
        command_outputs.append(command)
    return instances,command_outputs


### Brief example
if __name__ == "__main__":
    nb_instances = 4
    commands = [["sudo poweroff"]]*nb_instances
    working_dirs = ["/home/ec2-user"]*nb_instances ## We are not logged in as a typical user with a home directory.
    instance_type = INSTANCE_TYPE
    ami = AMI
    instances,commands = launch_and_send_commands(commands,instance_type,ami,working_dirs)
    ### For running future commands, checking status.
    print(instances,commands)
